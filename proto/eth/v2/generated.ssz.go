// Code generated by fastssz. DO NOT EDIT.
// Hash: fbe559fcef7a7718e5322397e207486ac953d6719556b53cd9ecac205b24b318
package eth

import (
	ssz "github.com/ferranbt/fastssz"
	github_com_prysmaticlabs_eth2_types "github.com/prysmaticlabs/eth2-types"
)

// MarshalSSZ ssz marshals the SyncSubcommittee object
func (s *SyncSubcommittee) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SyncSubcommittee object to a target array
func (s *SyncSubcommittee) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Validators'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Validators) * 8

	// Field (0) 'Validators'
	if len(s.Validators) > 512 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.Validators); ii++ {
		dst = ssz.MarshalUint64(dst, uint64(s.Validators[ii]))
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SyncSubcommittee object
func (s *SyncSubcommittee) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Validators'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'Validators'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 8, 512)
		if err != nil {
			return err
		}
		s.Validators = ssz.ExtendUint64(s.Validators, num)
		for ii := 0; ii < num; ii++ {
			s.Validators[ii] = github_com_prysmaticlabs_eth2_types.ValidatorIndex(ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8]))
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SyncSubcommittee object
func (s *SyncSubcommittee) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Validators'
	size += len(s.Validators) * 8

	return
}

// HashTreeRoot ssz hashes the SyncSubcommittee object
func (s *SyncSubcommittee) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SyncSubcommittee object with a hasher
func (s *SyncSubcommittee) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Validators'
	{
		if len(s.Validators) > 512 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.Validators {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.Validators))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(512, numItems, 8))
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the SyncCommitteeDuty object
func (s *SyncCommitteeDuty) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SyncCommitteeDuty object to a target array
func (s *SyncCommitteeDuty) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Pubkey'
	if len(s.Pubkey) != 48 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, s.Pubkey...)

	// Field (1) 'ValidatorIndex'
	dst = ssz.MarshalUint64(dst, uint64(s.ValidatorIndex))

	// Field (2) 'SyncCommitteeIndices'
	if len(s.SyncCommitteeIndices) != 512 {
		err = ssz.ErrVectorLength
		return
	}
	for ii := 0; ii < 512; ii++ {
		dst = ssz.MarshalUint64(dst, uint64(s.SyncCommitteeIndices[ii]))
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SyncCommitteeDuty object
func (s *SyncCommitteeDuty) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 4152 {
		return ssz.ErrSize
	}

	// Field (0) 'Pubkey'
	if cap(s.Pubkey) == 0 {
		s.Pubkey = make([]byte, 0, len(buf[0:48]))
	}
	s.Pubkey = append(s.Pubkey, buf[0:48]...)

	// Field (1) 'ValidatorIndex'
	s.ValidatorIndex = github_com_prysmaticlabs_eth2_types.ValidatorIndex(ssz.UnmarshallUint64(buf[48:56]))

	// Field (2) 'SyncCommitteeIndices'
	s.SyncCommitteeIndices = ssz.ExtendUint64(s.SyncCommitteeIndices, 512)
	for ii := 0; ii < 512; ii++ {
		s.SyncCommitteeIndices[ii] = github_com_prysmaticlabs_eth2_types.ValidatorIndex(ssz.UnmarshallUint64(buf[56:4152][ii*8 : (ii+1)*8]))
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SyncCommitteeDuty object
func (s *SyncCommitteeDuty) SizeSSZ() (size int) {
	size = 4152
	return
}

// HashTreeRoot ssz hashes the SyncCommitteeDuty object
func (s *SyncCommitteeDuty) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SyncCommitteeDuty object with a hasher
func (s *SyncCommitteeDuty) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Pubkey'
	if len(s.Pubkey) != 48 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(s.Pubkey)

	// Field (1) 'ValidatorIndex'
	hh.PutUint64(uint64(s.ValidatorIndex))

	// Field (2) 'SyncCommitteeIndices'
	{
		if len(s.SyncCommitteeIndices) != 512 {
			err = ssz.ErrVectorLength
			return
		}
		subIndx := hh.Index()
		for _, i := range s.SyncCommitteeIndices {
			hh.AppendUint64(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the SyncCommitteeSubscription object
func (s *SyncCommitteeSubscription) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SyncCommitteeSubscription object to a target array
func (s *SyncCommitteeSubscription) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(20)

	// Field (0) 'ValidatorIndex'
	dst = ssz.MarshalUint64(dst, uint64(s.ValidatorIndex))

	// Offset (1) 'SyncCommitteeIndices'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.SyncCommitteeIndices) * 8

	// Field (2) 'UntilEpoch'
	dst = ssz.MarshalUint64(dst, uint64(s.UntilEpoch))

	// Field (1) 'SyncCommitteeIndices'
	if len(s.SyncCommitteeIndices) > 1099511627776 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.SyncCommitteeIndices); ii++ {
		dst = ssz.MarshalUint64(dst, uint64(s.SyncCommitteeIndices[ii]))
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SyncCommitteeSubscription object
func (s *SyncCommitteeSubscription) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 20 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'ValidatorIndex'
	s.ValidatorIndex = github_com_prysmaticlabs_eth2_types.ValidatorIndex(ssz.UnmarshallUint64(buf[0:8]))

	// Offset (1) 'SyncCommitteeIndices'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 20 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'UntilEpoch'
	s.UntilEpoch = github_com_prysmaticlabs_eth2_types.Epoch(ssz.UnmarshallUint64(buf[12:20]))

	// Field (1) 'SyncCommitteeIndices'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 8, 1099511627776)
		if err != nil {
			return err
		}
		s.SyncCommitteeIndices = ssz.ExtendUint64(s.SyncCommitteeIndices, num)
		for ii := 0; ii < num; ii++ {
			s.SyncCommitteeIndices[ii] = github_com_prysmaticlabs_eth2_types.CommitteeIndex(ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8]))
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SyncCommitteeSubscription object
func (s *SyncCommitteeSubscription) SizeSSZ() (size int) {
	size = 20

	// Field (1) 'SyncCommitteeIndices'
	size += len(s.SyncCommitteeIndices) * 8

	return
}

// HashTreeRoot ssz hashes the SyncCommitteeSubscription object
func (s *SyncCommitteeSubscription) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SyncCommitteeSubscription object with a hasher
func (s *SyncCommitteeSubscription) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ValidatorIndex'
	hh.PutUint64(uint64(s.ValidatorIndex))

	// Field (1) 'SyncCommitteeIndices'
	{
		if len(s.SyncCommitteeIndices) > 1099511627776 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.SyncCommitteeIndices {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.SyncCommitteeIndices))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(1099511627776, numItems, 8))
	}

	// Field (2) 'UntilEpoch'
	hh.PutUint64(uint64(s.UntilEpoch))

	hh.Merkleize(indx)
	return
}
